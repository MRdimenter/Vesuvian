import { useEffect, useState } from "react"
import { OAuth2Service } from "../../common/utils/OAuth2Service";
import { ApiService } from "../../common/utils/ApiService";
import { BadRequestError, RefreshTokenMissingError, ServerError } from "../../common/utils/Errors/Errors";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { authenticationAction } from "../../store/actions/authenticationActions";
import { Button } from "../Button/Button";

const ListItem = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();

    
    //const apiService = useCallback(() => new ApiService(oauthService),[oauthService]);

    const [customersList, setCustomersList] = useState(null);
    const [page, setPage] = useState(1);

    function renderItems(arr) {
        return arr.map((customer) => {
            return (
                <li className="list=item"
                    key={customer.id}>
                    {customer.username}
                </li>
            )
        })
    }

    async function logout(dispatch) {
        const oAuth2Servise = new OAuth2Service();

        oAuth2Servise.OAuth2LogOut();
        localStorage.clear();
        dispatch(authenticationAction(false));
    }

    

/*
    const getAPICustomers = useCallback(async () => {
        try {
            let customersList = await apiService.getAllCustomers(page);
            //setCustomersList(customersList); // original (working) string
            setTimeout(() => setCustomersList(customersList), 1000); // For testing long loading
        } catch (error) {
            if (error instanceof RefreshTokenMissingError || error instanceof BadRequestError) {
                logout(dispatch); // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LogOut
                navigate("/reLoginPage"); //TODO –Ω–æ –ª—É—á—à–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å—é –ø–æ—á–µ–º—É —Ç–∞–∫)
            }
            if (error instanceof ServerError) {
                navigate("/errorPage");
            }
        }
    }, [page])
*/
    useEffect(() => {
        const oauthService = new OAuth2Service();
        const apiService = new ApiService(oauthService);
        
        async function getAPICustomers(page) {
            try {
                let customersList = await apiService.getAllCustomers(page);
                //setCustomersList(customersList); // original (working) string
                setTimeout(() => setCustomersList(customersList), 1000); // For testing long loading
            } catch (error) {
                if (error instanceof RefreshTokenMissingError || error instanceof BadRequestError) {
                    logout(dispatch); // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LogOut
                    navigate("/reLoginPage"); //TODO –Ω–æ –ª—É—á—à–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å—é –ø–æ—á–µ–º—É —Ç–∞–∫)
                }
                if (error instanceof ServerError) {
                    navigate("/errorPage");
                }
            }
        }

        setCustomersList(null);
        getAPICustomers(page);
    }, [page, dispatch, navigate]);

    function Loading() {
        return <h2>üåÄ Loading...</h2>;
    }

    function handleSubmit(selectedPage) {
        console.log('click');
        setPage(selectedPage);
    }

    if (customersList) {
        const items = renderItems(customersList)

        return (
            <div>
                <ul>
                    {items}
                </ul>
                <Button btnStyle='btn' label='1' action={e=>handleSubmit(e.target.textContent)} />
                <Button btnStyle='btn' label='2' action={e=>handleSubmit(e.target.textContent)} />
            </div>
        )

    } else {
        return <Loading />;
    }

}

export {
    ListItem,
}