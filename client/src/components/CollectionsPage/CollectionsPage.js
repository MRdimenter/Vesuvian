import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { ApiService } from '../../common/utils/ApiService';
import { OAuth2Service } from '../../common/utils/OAuth2Service';
import { authenticationAction } from '../../store/actions/authenticationActions';
import { collectionAction } from '../../store/actions/collectionAction';
import { LocalStorageService } from '../../common/utils/LocalStorageService';
import { BadRequestError, RefreshTokenMissingError, ServerError } from '../../common/utils/Errors/Errors';
import { CollectionsPageBody } from './CollectionsPageBody/CollectionsPageBody';
import { CollectionsPageHeader } from './CollectionsPageHeader/CollectionsPageHeader';
import { ErrorPage } from '../ErrorPage/ErrorPage';

import './collectionsPage.scss';
import { sortObjectValues } from './helpers/sortObjectValues';

export const DESC = 'desc';
export const INC = 'inc';

const sortingOptions = [
  {
    name: '‚Üë –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É',
    prop: 'name',
    sortDirection: INC,
  },
  {
    name: '‚Üì –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É',
    prop: 'name',
    sortDirection: DESC,
  },
  {
    name: '‚Üì –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è',
    prop: 'created_at',
    sortDirection: DESC,
  },
  {
    name: '‚Üë –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è',
    prop: 'created_at',
    sortDirection: INC,
  },
]

const groupingOptions = [
  {
    name: '‚Üë –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É',
    prop: 'name',
    sortDirection: INC,
  },
  {
    name: '‚Üì –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É',
    prop: 'name',
    sortDirection: DESC,
  },
]

const getSortedGroupsOfCollections = (arr, sortProp, order) => {
  const sortOrder = order === DESC ? -1 : 1;

  switch (sortProp) {
    case 'name':
      return arr.slice().sort((a, b) => {
        if (a[sortProp].toLowerCase() < b[sortProp].toLowerCase()) return -1 * sortOrder;
        if (a[sortProp].toLowerCase() > b[sortProp].toLowerCase()) return 1 * sortOrder;
        return 0;
      });
    case '':
      return arr.slice().sort((a, b) => {
        if (a[sortProp] < b[sortProp]) return -1 * sortOrder;
        if (a[sortProp] > b[sortProp]) return 1 * sortOrder;
        return 0;
      });
  
    default:
      break;
  }
}

const CollectionsPage = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const localStorageService = new LocalStorageService('CollectionsPage');

  const [collectionsList, setCollectionsList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  // –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const [isMakeTransition, setIsMakeTransition] = useState(false);
  const collectionDataState = useSelector((state) => state.collectionData.collectionData);
  const loadingCollectionData = useSelector((state) => state.collectionData.loading);
  const errorCollectionData = useSelector((state) => state.collectionData.error);
  // –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
  const[selectedGroupOtionIndex, setSelectedGroupOtionIndex] = useState(0);
  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const [selectedOtionIndex, setSelectedOptionIndex] = useState(0);
  
  useEffect(() => {
    if (isMakeTransition) {
      if (collectionDataState?.collectionCards && !loadingCollectionData && !errorCollectionData) {        
        const localStorageService = new LocalStorageService('CollectionsPage');

        localStorageService.setValue({collectionId: collectionDataState.collectionId});
        navigate('/collectionPage');
      } else {
        console.log('!errorCollectionData: ', !errorCollectionData);
      }
    }
  }, [isMakeTransition, navigate, collectionDataState, loadingCollectionData, errorCollectionData])

  //–¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–∞–º–æ—Å—Ç–æ—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  useEffect(() => {
    return () => {
      if (isMakeTransition) {
        setIsMakeTransition(false);
      }
    }
  }, [isMakeTransition])
  //-----------------------------------

  async function logout(dispatch) {
    const oAuth2Servise = new OAuth2Service();

    oAuth2Servise.OAuth2LogOut();
    localStorage.clear();
    dispatch(authenticationAction(false));
  }

  useEffect(() => {
    const oauthService = new OAuth2Service();
    const apiService = new ApiService(oauthService);

    async function fetchCurrentCustomerCollections() {  //TODO rename (–∑–ª–æ–π –∫–æ–ø–∏–ø–∞—Å—Ç - –Ω–µ –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
      setLoading(true);
      try {
        const reponseCollectionList = await apiService.getCurrentCustomerCollections();

        if (reponseCollectionList) {
          setCollectionsList(reponseCollectionList); // !!! original (working) string
          //setTimeout(() => setCollectionsList(customers), 1000); // For testing long loading   
        } else {
          setError(true);
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      } catch (error) {
        if (error instanceof RefreshTokenMissingError || error instanceof BadRequestError) {
          logout(dispatch); // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LogOut
          navigate("/reLoginPage"); //TODO –Ω–æ –ª—É—á—à–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å—é –ø–æ—á–µ–º—É —Ç–∞–∫)
        }
        if (error instanceof ServerError) {
          navigate("/errorPage");
        }
      } finally {
        setLoading(false);
      }
    }

    fetchCurrentCustomerCollections();
  }, [dispatch, navigate]);

  const onCollectionCardClick = async (collection) => {
    const { collection_id: collectionId } = collection;

    const localStorageService = new LocalStorageService('CollectionsPage');
    localStorageService.setValue({collectionId: collectionDataState.collectionId});

    setIsMakeTransition(true);

    // TODO –¥–æ–±–∞–≤–∏—Ç–±—å –ø—Ä–æ–≤–µ—Ä–∫—É (tryCatch) –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ dispatch(collectionAction
    // –≤ —Å–ª—É—á–∞–µ –ø–æ—Ç–µ—Ä–∏ –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É reLogin
    await dispatch(collectionAction(collectionId));
    // –≤ —Ç–µ–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –¥–∏—Å–ø–∞—Ç—á–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏

    //getCollectionById();
  }

  function Loading() {
    return <h2>üåÄ Loading...</h2>;
  }

  const spinner = (loading || loadingCollectionData) ? <div className='spinner'><Loading /></div> : null;
  const errorMessage = error ? <ErrorPage /> : null;
  const errorCollectionFetchingData = error ? <ErrorPage message='–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é' /> : null;

  const sortedGroupsOfCollections = getSortedGroupsOfCollections(collectionsList, sortingOptions[selectedGroupOtionIndex].prop, sortingOptions[selectedGroupOtionIndex].sortDirection);
  const sortedCardsInGroups = sortObjectValues(sortedGroupsOfCollections, false, 'name')
  
  const collections = sortedGroupsOfCollections ? 
    <>
      <CollectionsPageHeader
        groupingOptions={groupingOptions}
        selectedGroupOtionIndex={selectedGroupOtionIndex}
        setSelectedGroupOtionIndex={setSelectedGroupOtionIndex}
        sortingOptions={sortingOptions}
        selectedOtionIndex={selectedOtionIndex}
        setSelectedOptionIndex={setSelectedOptionIndex}
      />
      <CollectionsPageBody 
        sortedCollections={sortedGroupsOfCollections}
        groupingProp={groupingOptions[selectedGroupOtionIndex].prop}
        sortingProp={sortingOptions[selectedOtionIndex]}
        onCollectionCardClick={onCollectionCardClick} />
    </> : null;

  return (
    <div className='collections-page'>
      {spinner}
      {errorMessage}
      {errorCollectionFetchingData}
      {collections}
    </div>
  )
}

export {
  CollectionsPage,
}